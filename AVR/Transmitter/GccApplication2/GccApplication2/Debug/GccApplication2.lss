
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000970  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000770  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039f  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b1  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000207d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  78:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup_sensor>:
#define SET_PIN_HIGH(port, pin) ((port) |= (1 << (pin)))
#define TOGGLE_PIN(port, pin)   ((port) ^= (1 << (pin)))

void setup_sensor(void)
{
	DDRD |= (1 << PD5);   // Trigger output (Pin 5)
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD6);  // Echo input (Pin 6)
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8f 7b       	andi	r24, 0xBF	; 191
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	08 95       	ret

0000008e <timer_init>:
}

void timer_init(void)
{
	TCCR1A = 0;           // Normal mode
  8e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11);
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0;            // Reset timer
  98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  a0:	08 95       	ret

000000a2 <send_trigger_pulse>:
}

void send_trigger_pulse(void)
{
	// --- Send Trigger Pulse ---
	SET_PIN_LOW(PORTD, PD5);
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <send_trigger_pulse+0x8>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <send_trigger_pulse+0xe>
	_delay_us(2);
	SET_PIN_HIGH(PORTD, PD5);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	85 e3       	ldi	r24, 0x35	; 53
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <send_trigger_pulse+0x16>
  bc:	00 00       	nop
	_delay_us(10);
	SET_PIN_LOW(PORTD, PD5);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <calculate_distance>:
}

int calculate_distance(void)
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
	uint32_t start, end, duration;
	int distance;
	// --- Measure Echo ---
	while (!(PIND & (1 << PD6))); // Wait for Echo HIGH
  ca:	4e 9b       	sbis	0x09, 6	; 9
  cc:	fe cf       	rjmp	.-4      	; 0xca <calculate_distance+0x4>
	start = TCNT1;
  ce:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  d2:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
	while (PIND & (1 << PD6));    // Wait for Echo LOW
  da:	4e 99       	sbic	0x09, 6	; 9
  dc:	fe cf       	rjmp	.-4      	; 0xda <calculate_distance+0x14>
	end = TCNT1;
  de:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  e2:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  e6:	cb 01       	movw	r24, r22
  e8:	a0 e0       	ldi	r26, 0x00	; 0
  ea:	b0 e0       	ldi	r27, 0x00	; 0

	// Calculate duration in microseconds
	duration = (end - start) * 0.5; // prescaler=8, tick=0.5us
  ec:	bc 01       	movw	r22, r24
  ee:	cd 01       	movw	r24, r26
  f0:	60 1b       	sub	r22, r16
  f2:	71 0b       	sbc	r23, r17
  f4:	82 0b       	sbc	r24, r18
  f6:	93 0b       	sbc	r25, r19
  f8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__floatunsisf>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	5f e3       	ldi	r21, 0x3F	; 63
 104:	0e 94 65 01 	call	0x2ca	; 0x2ca <__mulsf3>
 108:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__fixunssfsi>

	// Convert duration to distance in cm using HC-SR04 approximation
	distance = duration / 58;
 10c:	2a e3       	ldi	r18, 0x3A	; 58
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodsi4>
	return distance;
}
 118:	c9 01       	movw	r24, r18
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <UART_setup>:

// --- UART Setup ---
void UART_setup(uint32_t baud)
{
 120:	9b 01       	movw	r18, r22
 122:	ac 01       	movw	r20, r24
	uint16_t ubrr = F_CPU/16/baud-1;
 124:	60 e4       	ldi	r22, 0x40	; 64
 126:	72 e4       	ldi	r23, 0x42	; 66
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodsi4>
 130:	21 50       	subi	r18, 0x01	; 1
 132:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
 134:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)ubrr;
 138:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0B = (1 << TXEN0);  // Enable transmitter
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8N1
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 148:	08 95       	ret

0000014a <UART_send_char>:
}

// --- Send one char via UART ---
void UART_send_char(char c)
{
	while (!(UCSR0A & (1 << UDRE0))); // Wait for empty transmit buffer
 14a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	95 ff       	sbrs	r25, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <UART_send_char>
	UDR0 = c;
 152:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 156:	08 95       	ret

00000158 <send_distance>:
}

// --- Send distance as char ---
void send_distance(int distance)
{
	if(distance <= 50)
 158:	c3 97       	sbiw	r24, 0x33	; 51
 15a:	24 f4       	brge	.+8      	; 0x164 <send_distance+0xc>
	{
		UART_send_char('1');
 15c:	81 e3       	ldi	r24, 0x31	; 49
 15e:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_send_char>
 162:	08 95       	ret
	}
	else
	{
		UART_send_char('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_send_char>
 16a:	08 95       	ret

0000016c <main>:
int main(void)
{
	int distance;

	// --- Sensor Setup ---
	setup_sensor();
 16c:	0e 94 40 00 	call	0x80	; 0x80 <setup_sensor>
	timer_init();
 170:	0e 94 47 00 	call	0x8e	; 0x8e <timer_init>
	UART_setup(9600);
 174:	60 e8       	ldi	r22, 0x80	; 128
 176:	75 e2       	ldi	r23, 0x25	; 37
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 90 00 	call	0x120	; 0x120 <UART_setup>

	while (1)
	{
		send_trigger_pulse();
 180:	0e 94 51 00 	call	0xa2	; 0xa2 <send_trigger_pulse>
		distance = calculate_distance();
 184:	0e 94 63 00 	call	0xc6	; 0xc6 <calculate_distance>
		send_distance(distance);
 188:	0e 94 ac 00 	call	0x158	; 0x158 <send_distance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	81 ee       	ldi	r24, 0xE1	; 225
 190:	94 e0       	ldi	r25, 0x04	; 4
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x26>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x30>
 19c:	00 00       	nop
 19e:	f0 cf       	rjmp	.-32     	; 0x180 <main+0x14>

000001a0 <__fixunssfsi>:
 1a0:	0e 94 44 01 	call	0x288	; 0x288 <__fp_splitA>
 1a4:	88 f0       	brcs	.+34     	; 0x1c8 <__fixunssfsi+0x28>
 1a6:	9f 57       	subi	r25, 0x7F	; 127
 1a8:	98 f0       	brcs	.+38     	; 0x1d0 <__fixunssfsi+0x30>
 1aa:	b9 2f       	mov	r27, r25
 1ac:	99 27       	eor	r25, r25
 1ae:	b7 51       	subi	r27, 0x17	; 23
 1b0:	b0 f0       	brcs	.+44     	; 0x1de <__fixunssfsi+0x3e>
 1b2:	e1 f0       	breq	.+56     	; 0x1ec <__fixunssfsi+0x4c>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	1a f0       	brmi	.+6      	; 0x1c4 <__fixunssfsi+0x24>
 1be:	ba 95       	dec	r27
 1c0:	c9 f7       	brne	.-14     	; 0x1b4 <__fixunssfsi+0x14>
 1c2:	14 c0       	rjmp	.+40     	; 0x1ec <__fixunssfsi+0x4c>
 1c4:	b1 30       	cpi	r27, 0x01	; 1
 1c6:	91 f0       	breq	.+36     	; 0x1ec <__fixunssfsi+0x4c>
 1c8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__fp_zero>
 1cc:	b1 e0       	ldi	r27, 0x01	; 1
 1ce:	08 95       	ret
 1d0:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__fp_zero>
 1d4:	67 2f       	mov	r22, r23
 1d6:	78 2f       	mov	r23, r24
 1d8:	88 27       	eor	r24, r24
 1da:	b8 5f       	subi	r27, 0xF8	; 248
 1dc:	39 f0       	breq	.+14     	; 0x1ec <__fixunssfsi+0x4c>
 1de:	b9 3f       	cpi	r27, 0xF9	; 249
 1e0:	cc f3       	brlt	.-14     	; 0x1d4 <__fixunssfsi+0x34>
 1e2:	86 95       	lsr	r24
 1e4:	77 95       	ror	r23
 1e6:	67 95       	ror	r22
 1e8:	b3 95       	inc	r27
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__fixunssfsi+0x42>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__fixunssfsi+0x5c>
 1ee:	90 95       	com	r25
 1f0:	80 95       	com	r24
 1f2:	70 95       	com	r23
 1f4:	61 95       	neg	r22
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	8f 4f       	sbci	r24, 0xFF	; 255
 1fa:	9f 4f       	sbci	r25, 0xFF	; 255
 1fc:	08 95       	ret

000001fe <__floatunsisf>:
 1fe:	e8 94       	clt
 200:	09 c0       	rjmp	.+18     	; 0x214 <__floatsisf+0x12>

00000202 <__floatsisf>:
 202:	97 fb       	bst	r25, 7
 204:	3e f4       	brtc	.+14     	; 0x214 <__floatsisf+0x12>
 206:	90 95       	com	r25
 208:	80 95       	com	r24
 20a:	70 95       	com	r23
 20c:	61 95       	neg	r22
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	8f 4f       	sbci	r24, 0xFF	; 255
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	99 23       	and	r25, r25
 216:	a9 f0       	breq	.+42     	; 0x242 <__floatsisf+0x40>
 218:	f9 2f       	mov	r31, r25
 21a:	96 e9       	ldi	r25, 0x96	; 150
 21c:	bb 27       	eor	r27, r27
 21e:	93 95       	inc	r25
 220:	f6 95       	lsr	r31
 222:	87 95       	ror	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	b7 95       	ror	r27
 22a:	f1 11       	cpse	r31, r1
 22c:	f8 cf       	rjmp	.-16     	; 0x21e <__floatsisf+0x1c>
 22e:	fa f4       	brpl	.+62     	; 0x26e <__floatsisf+0x6c>
 230:	bb 0f       	add	r27, r27
 232:	11 f4       	brne	.+4      	; 0x238 <__floatsisf+0x36>
 234:	60 ff       	sbrs	r22, 0
 236:	1b c0       	rjmp	.+54     	; 0x26e <__floatsisf+0x6c>
 238:	6f 5f       	subi	r22, 0xFF	; 255
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	8f 4f       	sbci	r24, 0xFF	; 255
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	16 c0       	rjmp	.+44     	; 0x26e <__floatsisf+0x6c>
 242:	88 23       	and	r24, r24
 244:	11 f0       	breq	.+4      	; 0x24a <__floatsisf+0x48>
 246:	96 e9       	ldi	r25, 0x96	; 150
 248:	11 c0       	rjmp	.+34     	; 0x26c <__floatsisf+0x6a>
 24a:	77 23       	and	r23, r23
 24c:	21 f0       	breq	.+8      	; 0x256 <__floatsisf+0x54>
 24e:	9e e8       	ldi	r25, 0x8E	; 142
 250:	87 2f       	mov	r24, r23
 252:	76 2f       	mov	r23, r22
 254:	05 c0       	rjmp	.+10     	; 0x260 <__floatsisf+0x5e>
 256:	66 23       	and	r22, r22
 258:	71 f0       	breq	.+28     	; 0x276 <__floatsisf+0x74>
 25a:	96 e8       	ldi	r25, 0x86	; 134
 25c:	86 2f       	mov	r24, r22
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	2a f0       	brmi	.+10     	; 0x26e <__floatsisf+0x6c>
 264:	9a 95       	dec	r25
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	da f7       	brpl	.-10     	; 0x264 <__floatsisf+0x62>
 26e:	88 0f       	add	r24, r24
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	97 f9       	bld	r25, 7
 276:	08 95       	ret

00000278 <__fp_split3>:
 278:	57 fd       	sbrc	r21, 7
 27a:	90 58       	subi	r25, 0x80	; 128
 27c:	44 0f       	add	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	59 f0       	breq	.+22     	; 0x298 <__fp_splitA+0x10>
 282:	5f 3f       	cpi	r21, 0xFF	; 255
 284:	71 f0       	breq	.+28     	; 0x2a2 <__fp_splitA+0x1a>
 286:	47 95       	ror	r20

00000288 <__fp_splitA>:
 288:	88 0f       	add	r24, r24
 28a:	97 fb       	bst	r25, 7
 28c:	99 1f       	adc	r25, r25
 28e:	61 f0       	breq	.+24     	; 0x2a8 <__fp_splitA+0x20>
 290:	9f 3f       	cpi	r25, 0xFF	; 255
 292:	79 f0       	breq	.+30     	; 0x2b2 <__fp_splitA+0x2a>
 294:	87 95       	ror	r24
 296:	08 95       	ret
 298:	12 16       	cp	r1, r18
 29a:	13 06       	cpc	r1, r19
 29c:	14 06       	cpc	r1, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	f2 cf       	rjmp	.-28     	; 0x286 <__fp_split3+0xe>
 2a2:	46 95       	lsr	r20
 2a4:	f1 df       	rcall	.-30     	; 0x288 <__fp_splitA>
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <__fp_splitA+0x30>
 2a8:	16 16       	cp	r1, r22
 2aa:	17 06       	cpc	r1, r23
 2ac:	18 06       	cpc	r1, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	f1 cf       	rjmp	.-30     	; 0x294 <__fp_splitA+0xc>
 2b2:	86 95       	lsr	r24
 2b4:	71 05       	cpc	r23, r1
 2b6:	61 05       	cpc	r22, r1
 2b8:	08 94       	sec
 2ba:	08 95       	ret

000002bc <__fp_zero>:
 2bc:	e8 94       	clt

000002be <__fp_szero>:
 2be:	bb 27       	eor	r27, r27
 2c0:	66 27       	eor	r22, r22
 2c2:	77 27       	eor	r23, r23
 2c4:	cb 01       	movw	r24, r22
 2c6:	97 f9       	bld	r25, 7
 2c8:	08 95       	ret

000002ca <__mulsf3>:
 2ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__mulsf3x>
 2ce:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__fp_round>
 2d2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fp_pscA>
 2d6:	38 f0       	brcs	.+14     	; 0x2e6 <__mulsf3+0x1c>
 2d8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fp_pscB>
 2dc:	20 f0       	brcs	.+8      	; 0x2e6 <__mulsf3+0x1c>
 2de:	95 23       	and	r25, r21
 2e0:	11 f0       	breq	.+4      	; 0x2e6 <__mulsf3+0x1c>
 2e2:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__fp_inf>
 2e6:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__fp_nan>
 2ea:	11 24       	eor	r1, r1
 2ec:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__fp_szero>

000002f0 <__mulsf3x>:
 2f0:	0e 94 3c 01 	call	0x278	; 0x278 <__fp_split3>
 2f4:	70 f3       	brcs	.-36     	; 0x2d2 <__mulsf3+0x8>

000002f6 <__mulsf3_pse>:
 2f6:	95 9f       	mul	r25, r21
 2f8:	c1 f3       	breq	.-16     	; 0x2ea <__mulsf3+0x20>
 2fa:	95 0f       	add	r25, r21
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	55 1f       	adc	r21, r21
 300:	62 9f       	mul	r22, r18
 302:	f0 01       	movw	r30, r0
 304:	72 9f       	mul	r23, r18
 306:	bb 27       	eor	r27, r27
 308:	f0 0d       	add	r31, r0
 30a:	b1 1d       	adc	r27, r1
 30c:	63 9f       	mul	r22, r19
 30e:	aa 27       	eor	r26, r26
 310:	f0 0d       	add	r31, r0
 312:	b1 1d       	adc	r27, r1
 314:	aa 1f       	adc	r26, r26
 316:	64 9f       	mul	r22, r20
 318:	66 27       	eor	r22, r22
 31a:	b0 0d       	add	r27, r0
 31c:	a1 1d       	adc	r26, r1
 31e:	66 1f       	adc	r22, r22
 320:	82 9f       	mul	r24, r18
 322:	22 27       	eor	r18, r18
 324:	b0 0d       	add	r27, r0
 326:	a1 1d       	adc	r26, r1
 328:	62 1f       	adc	r22, r18
 32a:	73 9f       	mul	r23, r19
 32c:	b0 0d       	add	r27, r0
 32e:	a1 1d       	adc	r26, r1
 330:	62 1f       	adc	r22, r18
 332:	83 9f       	mul	r24, r19
 334:	a0 0d       	add	r26, r0
 336:	61 1d       	adc	r22, r1
 338:	22 1f       	adc	r18, r18
 33a:	74 9f       	mul	r23, r20
 33c:	33 27       	eor	r19, r19
 33e:	a0 0d       	add	r26, r0
 340:	61 1d       	adc	r22, r1
 342:	23 1f       	adc	r18, r19
 344:	84 9f       	mul	r24, r20
 346:	60 0d       	add	r22, r0
 348:	21 1d       	adc	r18, r1
 34a:	82 2f       	mov	r24, r18
 34c:	76 2f       	mov	r23, r22
 34e:	6a 2f       	mov	r22, r26
 350:	11 24       	eor	r1, r1
 352:	9f 57       	subi	r25, 0x7F	; 127
 354:	50 40       	sbci	r21, 0x00	; 0
 356:	9a f0       	brmi	.+38     	; 0x37e <__mulsf3_pse+0x88>
 358:	f1 f0       	breq	.+60     	; 0x396 <__mulsf3_pse+0xa0>
 35a:	88 23       	and	r24, r24
 35c:	4a f0       	brmi	.+18     	; 0x370 <__mulsf3_pse+0x7a>
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	bb 1f       	adc	r27, r27
 364:	66 1f       	adc	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	88 1f       	adc	r24, r24
 36a:	91 50       	subi	r25, 0x01	; 1
 36c:	50 40       	sbci	r21, 0x00	; 0
 36e:	a9 f7       	brne	.-22     	; 0x35a <__mulsf3_pse+0x64>
 370:	9e 3f       	cpi	r25, 0xFE	; 254
 372:	51 05       	cpc	r21, r1
 374:	80 f0       	brcs	.+32     	; 0x396 <__mulsf3_pse+0xa0>
 376:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__fp_inf>
 37a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__fp_szero>
 37e:	5f 3f       	cpi	r21, 0xFF	; 255
 380:	e4 f3       	brlt	.-8      	; 0x37a <__mulsf3_pse+0x84>
 382:	98 3e       	cpi	r25, 0xE8	; 232
 384:	d4 f3       	brlt	.-12     	; 0x37a <__mulsf3_pse+0x84>
 386:	86 95       	lsr	r24
 388:	77 95       	ror	r23
 38a:	67 95       	ror	r22
 38c:	b7 95       	ror	r27
 38e:	f7 95       	ror	r31
 390:	e7 95       	ror	r30
 392:	9f 5f       	subi	r25, 0xFF	; 255
 394:	c1 f7       	brne	.-16     	; 0x386 <__mulsf3_pse+0x90>
 396:	fe 2b       	or	r31, r30
 398:	88 0f       	add	r24, r24
 39a:	91 1d       	adc	r25, r1
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	97 f9       	bld	r25, 7
 3a2:	08 95       	ret

000003a4 <__fp_inf>:
 3a4:	97 f9       	bld	r25, 7
 3a6:	9f 67       	ori	r25, 0x7F	; 127
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	08 95       	ret

000003b0 <__fp_nan>:
 3b0:	9f ef       	ldi	r25, 0xFF	; 255
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	08 95       	ret

000003b6 <__fp_pscA>:
 3b6:	00 24       	eor	r0, r0
 3b8:	0a 94       	dec	r0
 3ba:	16 16       	cp	r1, r22
 3bc:	17 06       	cpc	r1, r23
 3be:	18 06       	cpc	r1, r24
 3c0:	09 06       	cpc	r0, r25
 3c2:	08 95       	ret

000003c4 <__fp_pscB>:
 3c4:	00 24       	eor	r0, r0
 3c6:	0a 94       	dec	r0
 3c8:	12 16       	cp	r1, r18
 3ca:	13 06       	cpc	r1, r19
 3cc:	14 06       	cpc	r1, r20
 3ce:	05 06       	cpc	r0, r21
 3d0:	08 95       	ret

000003d2 <__fp_round>:
 3d2:	09 2e       	mov	r0, r25
 3d4:	03 94       	inc	r0
 3d6:	00 0c       	add	r0, r0
 3d8:	11 f4       	brne	.+4      	; 0x3de <__fp_round+0xc>
 3da:	88 23       	and	r24, r24
 3dc:	52 f0       	brmi	.+20     	; 0x3f2 <__fp_round+0x20>
 3de:	bb 0f       	add	r27, r27
 3e0:	40 f4       	brcc	.+16     	; 0x3f2 <__fp_round+0x20>
 3e2:	bf 2b       	or	r27, r31
 3e4:	11 f4       	brne	.+4      	; 0x3ea <__fp_round+0x18>
 3e6:	60 ff       	sbrs	r22, 0
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <__fp_round+0x20>
 3ea:	6f 5f       	subi	r22, 0xFF	; 255
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	8f 4f       	sbci	r24, 0xFF	; 255
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__udivmodsi4>:
 3f4:	a1 e2       	ldi	r26, 0x21	; 33
 3f6:	1a 2e       	mov	r1, r26
 3f8:	aa 1b       	sub	r26, r26
 3fa:	bb 1b       	sub	r27, r27
 3fc:	fd 01       	movw	r30, r26
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__udivmodsi4_ep>

00000400 <__udivmodsi4_loop>:
 400:	aa 1f       	adc	r26, r26
 402:	bb 1f       	adc	r27, r27
 404:	ee 1f       	adc	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	a2 17       	cp	r26, r18
 40a:	b3 07       	cpc	r27, r19
 40c:	e4 07       	cpc	r30, r20
 40e:	f5 07       	cpc	r31, r21
 410:	20 f0       	brcs	.+8      	; 0x41a <__udivmodsi4_ep>
 412:	a2 1b       	sub	r26, r18
 414:	b3 0b       	sbc	r27, r19
 416:	e4 0b       	sbc	r30, r20
 418:	f5 0b       	sbc	r31, r21

0000041a <__udivmodsi4_ep>:
 41a:	66 1f       	adc	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a 94       	dec	r1
 424:	69 f7       	brne	.-38     	; 0x400 <__udivmodsi4_loop>
 426:	60 95       	com	r22
 428:	70 95       	com	r23
 42a:	80 95       	com	r24
 42c:	90 95       	com	r25
 42e:	9b 01       	movw	r18, r22
 430:	ac 01       	movw	r20, r24
 432:	bd 01       	movw	r22, r26
 434:	cf 01       	movw	r24, r30
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
