
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000860  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041d  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000060  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LED_setup>:
#define SET_PIN_HIGH(port, pin) ((port) |= (1 << (pin)))
#define TOGGLE_PIN(port, pin)   ((port) ^= (1 << (pin)))

void LED_setup(int pin)
{
	DDRD |= (1 << pin);
  80:	9a b1       	in	r25, 0x0a	; 10
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <LED_setup+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <LED_setup+0x8>
  90:	29 2b       	or	r18, r25
  92:	2a b9       	out	0x0a, r18	; 10
  94:	08 95       	ret

00000096 <buzzer_setup>:
}

void buzzer_setup(int pin)
{
	DDRD |= (1 << pin);
  96:	9a b1       	in	r25, 0x0a	; 10
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <buzzer_setup+0xc>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	8a 95       	dec	r24
  a4:	e2 f7       	brpl	.-8      	; 0x9e <buzzer_setup+0x8>
  a6:	29 2b       	or	r18, r25
  a8:	2a b9       	out	0x0a, r18	; 10
  aa:	08 95       	ret

000000ac <UART_setup>:
}

// --- UART Setup ---
void UART_setup(uint32_t baud)
{
  ac:	9b 01       	movw	r18, r22
  ae:	ac 01       	movw	r20, r24
	uint16_t ubrr = F_CPU/16/baud-1;
  b0:	60 e4       	ldi	r22, 0x40	; 64
  b2:	72 e4       	ldi	r23, 0x42	; 66
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 9f 00 	call	0x13e	; 0x13e <__udivmodsi4>
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
  c0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)ubrr;
  c4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0B = (1 << RXEN0);  // Enable receiver
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8N1
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  d4:	08 95       	ret

000000d6 <UART_receive_char>:
}

// --- Receive one char ---
char UART_receive_char(void)
{
	while (!(UCSR0A & (1 << RXC0))); // Wait until data received
  d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <UART_receive_char>
	return UDR0;
  de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  e2:	08 95       	ret

000000e4 <receive_distance>:

// --- Receive distance as char ---
char receive_distance(void)
{
	char c;
	c = UART_receive_char();
  e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_receive_char>
	return c; // '1' for <=50cm, '0' for >50cm
}
  e8:	08 95       	ret

000000ea <main>:

int main(void) {
	char trigger;

	// LED output (Pin 7)
	LED_setup(PD7);
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 40 00 	call	0x80	; 0x80 <LED_setup>
	buzzer_setup(PD2);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <buzzer_setup>

	UART_setup(9600);
  fa:	60 e8       	ldi	r22, 0x80	; 128
  fc:	75 e2       	ldi	r23, 0x25	; 37
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 56 00 	call	0xac	; 0xac <UART_setup>

	while (1) {

		trigger = receive_distance();
 106:	0e 94 72 00 	call	0xe4	; 0xe4 <receive_distance>

		// --- Toggle LED/Buzzer exactly like original code ---
		if (trigger == '1') {
 10a:	81 33       	cpi	r24, 0x31	; 49
 10c:	41 f4       	brne	.+16     	; 0x11e <main+0x34>
			TOGGLE_PIN(PORTD, PD7);  // Toggle LED
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	80 58       	subi	r24, 0x80	; 128
 112:	8b b9       	out	0x0b, r24	; 11
			TOGGLE_PIN(PORTD, PD2);  // Toggle Buzzer
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	89 27       	eor	r24, r25
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	06 c0       	rjmp	.+12     	; 0x12a <main+0x40>
			} else {
			SET_PIN_LOW(PORTD, PD7); // LED OFF
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	8b b9       	out	0x0b, r24	; 11
			SET_PIN_LOW(PORTD, PD2); // Buzzer OFF
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	81 ee       	ldi	r24, 0xE1	; 225
 12e:	94 e0       	ldi	r25, 0x04	; 4
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x46>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x50>
 13a:	00 00       	nop
 13c:	e4 cf       	rjmp	.-56     	; 0x106 <main+0x1c>

0000013e <__udivmodsi4>:
 13e:	a1 e2       	ldi	r26, 0x21	; 33
 140:	1a 2e       	mov	r1, r26
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	fd 01       	movw	r30, r26
 148:	0d c0       	rjmp	.+26     	; 0x164 <__udivmodsi4_ep>

0000014a <__udivmodsi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	ee 1f       	adc	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	a2 17       	cp	r26, r18
 154:	b3 07       	cpc	r27, r19
 156:	e4 07       	cpc	r30, r20
 158:	f5 07       	cpc	r31, r21
 15a:	20 f0       	brcs	.+8      	; 0x164 <__udivmodsi4_ep>
 15c:	a2 1b       	sub	r26, r18
 15e:	b3 0b       	sbc	r27, r19
 160:	e4 0b       	sbc	r30, r20
 162:	f5 0b       	sbc	r31, r21

00000164 <__udivmodsi4_ep>:
 164:	66 1f       	adc	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	88 1f       	adc	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	1a 94       	dec	r1
 16e:	69 f7       	brne	.-38     	; 0x14a <__udivmodsi4_loop>
 170:	60 95       	com	r22
 172:	70 95       	com	r23
 174:	80 95       	com	r24
 176:	90 95       	com	r25
 178:	9b 01       	movw	r18, r22
 17a:	ac 01       	movw	r20, r24
 17c:	bd 01       	movw	r22, r26
 17e:	cf 01       	movw	r24, r30
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
